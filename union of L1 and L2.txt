#include <iostream>
#include <string>
using namespace std;

// Prototypes for state functions
void stateL1_0(const string &w, int i, char first1, char first2); // Start state for L1
void stateL1_1(const string &w, int i, char first1, char first2); // L1 state for checking first two characters
void stateL1_2(const string &w, int i, char first1, char first2); // L1 state for checking last two characters
void stateL2_0(const string &w); // Start state for L2
void simulateFA(const string &w); // Function to simulate the union FA

// Function to simulate the union of L1 and L2
void simulateFA(const string &w) {
    if (w.length() < 4) {
        cout << "String is rejected (Length is less than 4)" << endl;
        return;
    }

    bool acceptedByL1 = false;
    bool acceptedByL2 = false;

    // Simulate L1 (First two characters should match last two)
    cout << "Simulating L1..." << endl;
    stateL1_0(w, 0, w[0], w[1]); // Start L1 FA

    // Simulate L2 (Starts with 'a' and ends with 'b')
    cout << "Simulating L2..." << endl;
    stateL2_0(w);
    
    // Checking L1 condition directly here (First two characters should match last two)
    if (w.substr(0, 2) == w.substr(w.length() - 2)) {
        acceptedByL1 = true;
        cout << "String is accepted by L1 (First two characters match last two)" << endl;
    } else {
        cout << "String is rejected by L1" << endl;
    }

    // Checking L2 condition (Starts with 'a' and ends with 'b')
    if (w[0] == 'a' && w[w.length() - 1] == 'b') {
        acceptedByL2 = true;
        cout << "String is accepted by L2 (Starts with 'a' and ends with 'b')" << endl;
    } else {
        cout << "String is rejected by L2" << endl;
    }

    // Union of L1 and L2
    if (acceptedByL1 || acceptedByL2) {
        cout << "String is accepted by the union (L1 ∪ L2)" << endl;
    } else {
        cout << "String is rejected by the union (L1 ∪ L2)" << endl;
    }
}

// L1 simulation (first two characters should match last two)
void stateL1_0(const string &w, int i, char first1, char first2) {
    cout << "L1 State 0: Reading '" << w[i] << "'" << endl;
    if (w[i] != 'a' && w[i] != 'b') {
        cout << "Invalid character encountered in L1. String is rejected." << endl;
        return;
    }
    stateL1_1(w, i + 1, first1, first2); // Proceed to stateL1_1 with first two characters
}

void stateL1_1(const string &w, int i, char first1, char first2) {
    cout << "L1 State 1: Reading '" << w[i] << "'" << endl;
    if (w[i] != 'a' && w[i] != 'b') {
        cout << "Invalid character encountered in L1. String is rejected." << endl;
        return;
    }
    if (i >= w.length() - 2) {
        stateL1_2(w, i, first1, first2); // Move to last two characters in stateL1_2
    } else {
        stateL1_1(w, i + 1, first1, first2); // Keep reading
    }
}

void stateL1_2(const string &w, int i, char first1, char first2) {
    cout << "L1 State 2: Checking last two characters" << endl;
    if (w[i] == first1 && w[i + 1] == first2) {
        cout << "String is accepted by L1 (First two characters match last two)" << endl;
    } else {
        cout << "String is rejected by L1 (First two characters do not match last two)" << endl;
    }
}

// L2 simulation (starts with 'a' and ends with 'b')
void stateL2_0(const string &w) {
    cout << "L2 State 0: Checking if string starts with 'a' and ends with 'b'" << endl;
    if (w[0] == 'a' && w[w.length() - 1] == 'b') {
        cout << "String is accepted by L2 (Starts with 'a' and ends with 'b')" << endl;
    } else {
        cout << "String is rejected by L2" << endl;
    }
}

int main() {
    string input;
    cout << "Enter a string over {a, b}: ";
    cin >> input;
    simulateFA(input);
    return 0;
}

